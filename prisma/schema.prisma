// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  username      String         @unique
  password      String
  firstName     String
  lastName      String
  profilePic    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  todos         Todo[]
  collaborators Collaborator[]
  TodoHistory   TodoHistory[]
}

model Todo {
  id             String         @id @default(cuid())
  title          String
  description    String
  done           Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  user           User           @relation(fields: [userId], references: [id])
  userId         String
  todoColor      String         @default("")
  images         Image[] // Relation to the Image model
  collaborators  Collaborator[]
  lastModifiedBy String         @default("")
  TodoHistory    TodoHistory[]
}

model TodoHistory {
  id             String         @id @default(uuid())
  todoId         String
  title          String?
  description    String?
  done           Boolean?
  todoColor      String?
  lastModifiedBy String
  createdAt      DateTime       @default(now())
  collaborators  Collaborator[]
  userId         String?
  user           User?          @relation(fields: [userId], references: [id])
  Todo           Todo           @relation(fields: [todoId], references: [id])

  @@index([todoId])
}

model Image {
  id            String   @id @default(cuid())
  url           String
  todo          Todo     @relation(fields: [todoId], references: [id], onDelete: Cascade)
  todoId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  todoHistoryId String?
}

model Collaborator {
  id            String       @id @default(cuid())
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  todo          Todo         @relation(fields: [todoId], references: [id], onDelete: Cascade)
  todoId        String
  isOwner       Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  TodoHistory   TodoHistory? @relation(fields: [todoHistoryId], references: [id])
  todoHistoryId String?

  @@unique([userId, todoId])
}
